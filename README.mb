

# SwiftSocket.ioNative

**SwiftSocket.ioNative** es un cliente WebSocket 100% nativo en Swift 6, diseñado para replicar el comportamiento de `socket.io-client`, pero con una API moderna, segura para concurrencia y sin dependencias externas.

Es ideal para conectar tus apps iOS, macOS o tvOS con servidores basados en `socket.io` como Node.js o NestJS.

---

## 🚀 Características

- 🔌 Conexión WebSocket nativa (`URLSessionWebSocketTask`)
- 🔐 Autenticación mediante `userId` (vía query param)
- 📤 Envío de eventos (`emit`)
- 📥 Escucha de eventos (`on`)
- ✅ Soporte para ACKs opcionales (`emit(..., ack:)`)
- 🔁 Reconexión automática opcional
- 🧠 Decodificación tipada con `.decode(as:)`
- 🟢 Ping/Pong automático configurable
- 🔧 Flexible: sin singletons, sin restricciones de UI

---

## 📦 Instalación

Agrega a tu `Package.swift`:

```swift
.package(url: "https://github.com/tuusuario/SwiftSocket.ioNative.git", from: "1.0.0")
```

Y en tus targets:

```swift
.target(
  name: "TuModulo",
  dependencies: [
    .product(name: "SwiftSocketIONative", package: "SwiftSocket.ioNative")
  ]
)
```

---

## 📐 Uso básico

```swift
let socket = SwiftSocketIOClient(
    url: URL(string: "wss://tu-servidor.com/QA/chat/socket")!,
    userId: "usuario123",
    usePing: true,              // Opcional
    pingInterval: 10            // Opcional
)

socket.connect()

socket.emit(event: "sendMessage", data: ["text": "Hola"])

socket.on(event: "receiveMessage") { payload in
    print("📥 Datos recibidos:", payload ?? .null)
}
```

---

## 🧠 Decodificación tipada

```swift
struct ChatMessage: Codable {
    let text: String
    let sender: String
}

socket.on(event: "receiveMessage") { payload in
    if let message = payload?.decode(as: ChatMessage.self) {
        print("📩 \(message.sender): \(message.text)")
    }
}
```

---

## ✅ Confirmaciones (ACK)

```swift
socket.emit(event: "sendMessage", data: ["text": "Hola"]) { respuesta in
    print("🔁 Confirmación:", respuesta ?? "sin respuesta")
}
```

---

## 🔁 Ping/Pong automático

Activa ping/pong para mantener la conexión viva:

```swift
let socket = SwiftSocketIOClient(
    url: myURL,
    userId: "usuario123",
    usePing: true,              // 🔁 Activar ping
    pingInterval: 15            // Tiempo entre pings
)
```

El cliente enviará automáticamente `"ping"` cada `pingInterval` segundos. Puedes escuchar `"pong"` desde el servidor si deseas registrar confirmación.

---

## 🧪 Testing con Swift Testing

Este package es compatible con Swift Testing en Xcode 16+.

### Requisitos

- Swift 6 / Xcode 16 beta
- Variable de entorno `SOCKET_SERVER_URL`

```bash
SOCKET_SERVER_URL=wss://tu-servidor.ngrok.app swift test
```

### Ejemplo:

```swift
@Suite
struct SocketTests {
    struct TestMessage: Codable, Equatable {
        let text: String
    }

    @Test("Emitir con ACK")
    func testEmitAck() async throws {
        let url = URL(string: ProcessInfo.processInfo.environment["SOCKET_SERVER_URL"] ?? "")!
        let socket = SwiftSocketIOClient(url: url, userId: "test")

        try await withCheckedThrowingContinuation { cont in
            socket.connect()
            Task {
                try await Task.sleep(nanoseconds: 1_000_000_000)
                socket.emit(event: "sendMessage", data: TestMessage(text: "ping")) { _ in
                    cont.resume()
                }
            }
        }

        #expect(true)
    }
}
```

---

## 📁 Estructura del paquete

```
Sources/
└── SwiftSocketIONative/
    ├── SwiftSocketIOClient.swift
    ├── SocketEvent.swift
    ├── CodableValue.swift
    ├── AckManager.swift
    ├── EventRouter.swift
    └── Protocols.swift

Tests/
└── SwiftSocketIONativeTests/
    └── SwiftSocketIOClientTests.swift
```

---

## 🧩 Requisitos

- Swift 6
- iOS 15+, macOS 12+, tvOS 15+
- Xcode 15.3+ (Xcode 16 recomendado para Testing)

---

## 📄 Licencia

Este proyecto está bajo licencia MIT. Consulta [LICENSE](./LICENSE) para más detalles.

---

## 🤝 Contribuciones

¡Pull requests y sugerencias bienvenidas!

Este package busca replicar el 100% del comportamiento de `socket.io-client`, pero usando solo tecnologías nativas de Swift y Apple.

---

## 💬 Contacto

¿Tienes dudas o mejoras?
Abre un issue o crea un PR directamente en [github.com/tuusuario/SwiftSocket.ioNative](https://github.com/tuusuario/SwiftSocket.ioNative)
